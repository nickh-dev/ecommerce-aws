name: Deploy and Manage Infrastructure

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: "eu-central-1"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Set to "true" to manually destroy infrastructure.'
        required: false
        default: "false"

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.1'

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Generate Ansible Inventory
        run: |
          echo "[prestashop]" > inventory.yml
          echo "$(terraform output -raw dns_name) ansible_ssh_user=ubuntu" >> inventory.yml
        working-directory: ./terraform

      - name: Set up Python for Ansible
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Execute Ansible Playbooks
        run: ansible-playbook -i inventory.yml main.yml
        working-directory: ./ansible

  cleanup:
    if: ${{ needs.deploy.outputs.status == 'failure' || (github.event.inputs.destroy == 'true' && github.event_name == 'workflow_dispatch') }}
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.1'

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ./terraform
